# See: https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
# Note: you can't refactor this out: its at the top of every script so the scripts can find their includes.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

function log() {
  echo "$*" 1>&2
}

function fatal() {
  echo "$*" 1>&2
  exit 1
}

extra_args=()

if [ -x "$(command -v podman)" ]; then
    builder="$(command -v podman)"
    extra_args+=( --volume /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro )
    extra_args+=( "--build-arg=https_proxy=${https_proxy}" "--build-arg=HTTPS_PROXY=${HTTPS_PROXY}" )
    extra_args+=( "--build-arg=http_proxy=${http_proxy}" "--build-arg=HTTP_PROXY=${HTTP_PROXY}" )
elif [ -x "$(command -v docker)" ]; then
    builder="$(command -v docker)"
else
    fatal "Could not find docker or podman commands."
fi

pushd "$SCRIPT_DIR" 1>/dev/null || fatal "Could not change directory"

dockerfile="$(find . -maxdepth 2 -mindepth 2 -name Dockerfile)"
context_dir="$(dirname "$dockerfile")"

exec "$builder" build "${extra_args[@]}" --iidfile .iid "$context_dir"